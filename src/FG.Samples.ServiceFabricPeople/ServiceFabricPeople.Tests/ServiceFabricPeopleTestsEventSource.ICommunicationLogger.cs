/*******************************************************************************************
*  This class is autogenerated from the class CommunicationLogger
*  Do not directly update this class as changes will be lost on rebuild.
*******************************************************************************************/
using System;
using System.Diagnostics.Tracing;
using System.Threading.Tasks;

namespace ServiceFabricPeople.Tests
{
	internal sealed partial class ServiceFabricPeopleTestsEventSource
	{

		private const int StartRecieveActorMessageEventId = 1001;

		[Event(StartRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Actor Message {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.RecieveActorMessage)]
		private void StartRecieveActorMessage(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StartRecieveActorMessageEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StartRecieveActorMessage(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveActorMessage(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int StopRecieveActorMessageEventId = 2002;

		[Event(StopRecieveActorMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Actor Message {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.RecieveActorMessage)]
		private void StopRecieveActorMessage(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StopRecieveActorMessageEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StopRecieveActorMessage(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveActorMessage(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int RecieveActorMessageFailedEventId = 3003;

		[Event(RecieveActorMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{5}", Keywords = Keywords.Communication)]
		private void RecieveActorMessageFailed(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveActorMessageFailedEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveActorMessageFailed(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveActorMessageFailed(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetActorMethodNameEventId = 4004;

		[Event(FailedToGetActorMethodNameEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Communication)]
		private void FailedToGetActorMethodName(
			string testrun, 
			string actorMessageHeaders, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetActorMethodNameEventId, 
				testrun, 
				actorMessageHeaders, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetActorMethodName(
			string testrun, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetActorMethodName(
					testrun, 
					actorMessageHeaders.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToReadActorMessageHeadersEventId = 5005;

		[Event(FailedToReadActorMessageHeadersEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Communication)]
		private void FailedToReadActorMessageHeaders(
			string testrun, 
			string serviceRemotingMessageHeaders, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadActorMessageHeadersEventId, 
				testrun, 
				serviceRemotingMessageHeaders, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadActorMessageHeaders(
			string testrun, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadActorMessageHeaders(
					testrun, 
					serviceRemotingMessageHeaders.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRecieveServiceMessageEventId = 6006;

		[Event(StartRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Start Recieve Service Message {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.RecieveServiceMessage)]
		private void StartRecieveServiceMessage(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StartRecieveServiceMessageEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StartRecieveServiceMessage(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartRecieveServiceMessage(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int StopRecieveServiceMessageEventId = 7007;

		[Event(StopRecieveServiceMessageEventId, Level = EventLevel.LogAlways, Message = "Stop Recieve Service Message {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.RecieveServiceMessage)]
		private void StopRecieveServiceMessage(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StopRecieveServiceMessageEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StopRecieveServiceMessage(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopRecieveServiceMessage(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int RecieveServiceMessageFailedEventId = 8008;

		[Event(RecieveServiceMessageFailedEventId, Level = EventLevel.LogAlways, Message = "{5}", Keywords = Keywords.Communication)]
		private void RecieveServiceMessageFailed(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				RecieveServiceMessageFailedEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void RecieveServiceMessageFailed(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				RecieveServiceMessageFailed(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int FailedToGetServiceMethodNameEventId = 9009;

		[Event(FailedToGetServiceMethodNameEventId, Level = EventLevel.LogAlways, Message = "{4}", Keywords = Keywords.Communication)]
		private void FailedToGetServiceMethodName(
			string testrun, 
			string requestUri, 
			int interfaceId, 
			int methodId, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToGetServiceMethodNameEventId, 
				testrun, 
				requestUri, 
				interfaceId, 
				methodId, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToGetServiceMethodName(
			string testrun, 
			System.Uri requestUri, 
			int interfaceId, 
			int methodId, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToGetServiceMethodName(
					testrun, 
					requestUri.ToString(), 
					interfaceId, 
					methodId, 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartRequestContextEventId = 10010;

		[Event(StartRequestContextEventId, Level = EventLevel.LogAlways, Message = "Start Request Context {1}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start)]
		private void StartRequestContext(
			string testrun, 
			string headers)
		{
			WriteEvent(
				StartRequestContextEventId, 
				testrun, 
				headers);
		}

		[NonEvent]
		public void StartRequestContext(
			string testrun, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StartRequestContext(
					testrun, 
					headers.ToString());
			}
		}


		private const int StopRequestContextEventId = 11011;

		[Event(StopRequestContextEventId, Level = EventLevel.LogAlways, Message = "Stop Request Context {1}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop)]
		private void StopRequestContext(
			string testrun, 
			string headers)
		{
			WriteEvent(
				StopRequestContextEventId, 
				testrun, 
				headers);
		}

		[NonEvent]
		public void StopRequestContext(
			string testrun, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers)
		{
			if (this.IsEnabled())
			{
				StopRequestContext(
					testrun, 
					headers.ToString());
			}
		}


		private const int FailedRequestContextEventId = 12012;

		[Event(FailedRequestContextEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Communication)]
		private void FailedRequestContext(
			string testrun, 
			string headers, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedRequestContextEventId, 
				testrun, 
				headers, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedRequestContext(
			string testrun, 
			System.Collections.Generic.IEnumerable<FG.ServiceFabric.Services.Remoting.FabricTransport.ServiceRequestHeader> headers, 
			System.Exception exception)
		{
			if (this.IsEnabled())
			{
				FailedRequestContext(
					testrun, 
					headers.ToString(), 
					exception.Message, 
					exception.Source, 
					exception.GetType().FullName, 
					exception.AsJson());
			}
		}


		private const int FailedToReadCustomServiceMessageHeaderEventId = 13013;

		[Event(FailedToReadCustomServiceMessageHeaderEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Communication)]
		private void FailedToReadCustomServiceMessageHeader(
			string testrun, 
			string serviceRemotingMessageHeaders, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToReadCustomServiceMessageHeaderEventId, 
				testrun, 
				serviceRemotingMessageHeaders, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToReadCustomServiceMessageHeader(
			string testrun, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceRemotingMessageHeaders, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToReadCustomServiceMessageHeader(
					testrun, 
					serviceRemotingMessageHeaders.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratingPartitionsEventId = 14014;

		[Event(EnumeratingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerating Partitions {1}", Keywords = Keywords.Communication)]
		private void EnumeratingPartitions(
			string testrun, 
			string serviceUri)
		{
			WriteEvent(
				EnumeratingPartitionsEventId, 
				testrun, 
				serviceUri);
		}

		[NonEvent]
		public void EnumeratingPartitions(
			string testrun, 
			System.Uri serviceUri)
		{
			if (this.IsEnabled())
			{
				EnumeratingPartitions(
					testrun, 
					serviceUri.ToString());
			}
		}


		private const int FailedToEnumeratePartitionsEventId = 15015;

		[Event(FailedToEnumeratePartitionsEventId, Level = EventLevel.LogAlways, Message = "{2}", Keywords = Keywords.Communication)]
		private void FailedToEnumeratePartitions(
			string testrun, 
			string serviceUri, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				FailedToEnumeratePartitionsEventId, 
				testrun, 
				serviceUri, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void FailedToEnumeratePartitions(
			string testrun, 
			System.Uri serviceUri, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				FailedToEnumeratePartitions(
					testrun, 
					serviceUri.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int EnumeratedExistingPartitionsEventId = 16016;

		[Event(EnumeratedExistingPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated Existing Partitions {1} {2}", Keywords = Keywords.Communication)]
		private void EnumeratedExistingPartitions(
			string testrun, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedExistingPartitionsEventId, 
				testrun, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedExistingPartitions(
			string testrun, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.ServicePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedExistingPartitions(
					testrun, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int EnumeratedAndCachedPartitionsEventId = 17017;

		[Event(EnumeratedAndCachedPartitionsEventId, Level = EventLevel.LogAlways, Message = "Enumerated And Cached Partitions {1} {2}", Keywords = Keywords.Communication)]
		private void EnumeratedAndCachedPartitions(
			string testrun, 
			string serviceUri, 
			string partitions)
		{
			WriteEvent(
				EnumeratedAndCachedPartitionsEventId, 
				testrun, 
				serviceUri, 
				partitions);
		}

		[NonEvent]
		public void EnumeratedAndCachedPartitions(
			string testrun, 
			System.Uri serviceUri, 
			System.Collections.Generic.IEnumerable<System.Fabric.ServicePartitionInformation> partitions)
		{
			if (this.IsEnabled())
			{
				EnumeratedAndCachedPartitions(
					testrun, 
					serviceUri.ToString(), 
					partitions.ToString());
			}
		}


		private const int StartCallActorEventId = 18018;

		[Event(StartCallActorEventId, Level = EventLevel.LogAlways, Message = "Start Call Actor {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.CallActor)]
		private void StartCallActor(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StartCallActorEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StartCallActor(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallActor(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int StopCallActorEventId = 19019;

		[Event(StopCallActorEventId, Level = EventLevel.LogAlways, Message = "Stop Call Actor {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.CallActor)]
		private void StopCallActor(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StopCallActorEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StopCallActor(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallActor(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int CallActorFailedEventId = 20020;

		[Event(CallActorFailedEventId, Level = EventLevel.LogAlways, Message = "{5}", Keywords = Keywords.Communication)]
		private void CallActorFailed(
			string testrun, 
			string requestUri, 
			string actorMethodName, 
			string actorMessageHeaders, 
			string customServiceRequestHeader, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallActorFailedEventId, 
				testrun, 
				requestUri, 
				actorMethodName, 
				actorMessageHeaders, 
				customServiceRequestHeader, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallActorFailed(
			string testrun, 
			System.Uri requestUri, 
			string actorMethodName, 
			FG.ServiceFabric.Actors.Remoting.Runtime.ActorMessageHeaders actorMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallActorFailed(
					testrun, 
					requestUri.ToString(), 
					actorMethodName, 
					actorMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int StartCallServiceEventId = 21021;

		[Event(StartCallServiceEventId, Level = EventLevel.LogAlways, Message = "Start Call Service {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Start, Task = Tasks.CallService)]
		private void StartCallService(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StartCallServiceEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StartCallService(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StartCallService(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int StopCallServiceEventId = 22022;

		[Event(StopCallServiceEventId, Level = EventLevel.LogAlways, Message = "Stop Call Service {1} {2} {3} {4}", Keywords = Keywords.Communication, Opcode = EventOpcode.Stop, Task = Tasks.CallService)]
		private void StopCallService(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader)
		{
			WriteEvent(
				StopCallServiceEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader);
		}

		[NonEvent]
		public void StopCallService(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader)
		{
			if (this.IsEnabled())
			{
				StopCallService(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString());
			}
		}


		private const int CallServiceFailedEventId = 23023;

		[Event(CallServiceFailedEventId, Level = EventLevel.LogAlways, Message = "{5}", Keywords = Keywords.Communication)]
		private void CallServiceFailed(
			string testrun, 
			string requestUri, 
			string serviceMethodName, 
			string serviceMessageHeaders, 
			string customServiceRequestHeader, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				CallServiceFailedEventId, 
				testrun, 
				requestUri, 
				serviceMethodName, 
				serviceMessageHeaders, 
				customServiceRequestHeader, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void CallServiceFailed(
			string testrun, 
			System.Uri requestUri, 
			string serviceMethodName, 
			Microsoft.ServiceFabric.Services.Remoting.V1.ServiceRemotingMessageHeaders serviceMessageHeaders, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				CallServiceFailed(
					testrun, 
					requestUri.ToString(), 
					serviceMethodName, 
					serviceMessageHeaders.ToString(), 
					customServiceRequestHeader.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


		private const int ServiceClientFailedEventId = 24024;

		[Event(ServiceClientFailedEventId, Level = EventLevel.LogAlways, Message = "{3}", Keywords = Keywords.Communication)]
		private void ServiceClientFailed(
			string testrun, 
			string requestUri, 
			string customServiceRequestHeader, 
			string message, 
			string source, 
			string exceptionTypeName, 
			string exception)
		{
			WriteEvent(
				ServiceClientFailedEventId, 
				testrun, 
				requestUri, 
				customServiceRequestHeader, 
				message, 
				source, 
				exceptionTypeName, 
				exception);
		}

		[NonEvent]
		public void ServiceClientFailed(
			string testrun, 
			System.Uri requestUri, 
			FG.ServiceFabric.Services.Remoting.FabricTransport.CustomServiceRequestHeader customServiceRequestHeader, 
			System.Exception ex)
		{
			if (this.IsEnabled())
			{
				ServiceClientFailed(
					testrun, 
					requestUri.ToString(), 
					customServiceRequestHeader.ToString(), 
					ex.Message, 
					ex.Source, 
					ex.GetType().FullName, 
					ex.AsJson());
			}
		}


	}
}